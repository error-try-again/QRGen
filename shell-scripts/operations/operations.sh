#!/bin/bash

# --- User Actions --- #

# Dumps logs of all containers orchestrated by the Docker Compose file.
dump_logs() {
  test_docker_env
  produce_docker_logs > "$PROJECT_LOGS_DIR/service.log" && {
    echo "Docker logs dumped to $PROJECT_LOGS_DIR/service.log"
    cat "$PROJECT_LOGS_DIR/service.log"
  }
}

# Cleans current Docker Compose setup, arranges directories, and reinitiates Docker services.
reload() {
  echo "Reloading the project..."
  test_docker_env
  setup_project_directories
  stop_containers
  generate_server_files
  configure_nginx
  build_and_run_docker
}

# Shuts down any running Docker containers associated with the project and deletes the entire project directory.
cleanup() {
  test_docker_env
  echo "Cleaning up..."
  stop_containers

  declare -A directories=(
                ["Project"]=$PROJECT_ROOT_DIR
                ["Frontend"]=$FRONTEND_DIR
                ["Backend"]=$BACKEND_DIR
  )

  local dir_name
  local dir_path

  for dir_name in "${!directories[@]}"; do
    dir_path="${directories[$dir_name]}"
    if [[ -d $dir_path   ]]; then
      rm -rf "$dir_path" && cd ..
      echo "$dir_name directory $dir_path deleted."
    fi
  done

  echo "Cleanup complete."
}

#######################################
# description
# Arguments:
#  None
#######################################
update_project() {
  git stash
  git pull
}

#######################################
# Stops, removes Docker containers, images, volumes, and networks starting with 'qrgen'.
# Globals:
#   None
# Arguments:
#  None
#######################################
purge_builds() {
  test_docker_env

  local containers_to_remove
  local images_to_remove
  local volumes_to_remove
  local networks_to_remove

  echo "Identifying Docker resources associated with 'qrgen'..."

  containers_to_remove=$(docker ps -a --format '{{.Names}}' | grep '^qrgen')
  images_to_remove=$(docker images --format '{{.Repository}}:{{.Tag}}' | grep '^qrgen')
  volumes_to_remove=$(docker volume ls --format '{{.Name}}' | grep '^qrgen')
  networks_to_remove=$(docker network ls --format '{{.Name}}' | grep '^qrgen')

  if [ -n "$containers_to_remove" ]; then
    echo "Stopping and removing containers: $containers_to_remove"
    echo "$containers_to_remove" | xargs -r docker stop
    echo "$containers_to_remove" | xargs -r docker rm
  else
    echo "No containers to stop and remove."
  fi

  if [ -n "$images_to_remove" ]; then
    echo "Removing images: $images_to_remove"
    echo "$images_to_remove" | xargs -r docker rmi
  else
    echo "No images to remove."
  fi

  if [ -n "$volumes_to_remove" ]; then
    echo "Removing volumes: $volumes_to_remove"
    echo "$volumes_to_remove" | xargs -r docker volume rm
  else
    echo "No volumes to remove."
  fi

  if [ -n "$networks_to_remove" ]; then
    echo "Removing networks: $networks_to_remove"
    echo "$networks_to_remove" | xargs -r docker network rm
  else
    echo "No networks to remove."
  fi
}

#######################################
# description
# Arguments:
#  None
#######################################
quit() {
  echo "Exiting..."
  exit 0
}

#######################################
# description
# Globals:
#   USE_LETS_ENCRYPT
# Arguments:
#  None
#######################################
handle_certs() {
  # Handle Let's Encrypt configuration
  if [[ $USE_LETS_ENCRYPT == "yes"   ]]; then

    # Generate self-signed certificates if they don't exist
    generate_self_signed_certificates

    # Start cert watcher here to ensure that changes to the self-signed certs are
    # picked up by ifnotify if they are regenerated by certbot after this
    initialize_cert_watcher || {
      echo "Failed to initialize cert watcher"
      exit 1
    }

  fi
}

# Function to remove containers that conflict with Docker Compose services
remove_conflicting_containers() {
  # Extract service names from docker-compose.yml
  local service_names
  service_names=$(docker compose config --services)

  # Loop through each service name to check if corresponding container exists
  for service in $service_names; do
    # Generate the probable container name based on the folder name and service name
    # e.g. In this instance, since the project name is "QRGen" and the service
    # name is "backend", the probable container name would be "QRGen_backend_1"
    local probable_container_name="${PWD##*/}_${service}_1"

    # Check if a container with the generated name exists
    if docker ps -a --format '{{.Names}}' | grep -qw "$probable_container_name"; then
      echo "Removing existing container that may conflict: $probable_container_name"
      docker rm -f "$probable_container_name"
    else
      echo "No conflict for $probable_container_name"
    fi
  done
}

# Function to handle ambiguous Docker networks
handle_ambiguous_networks() {
  echo "Searching for ambiguous Docker networks..."
  local networks_ids
  local network_id

  # Get all custom networks (excluding default ones)
  networks_ids=$(docker network ls --filter name=qrgen --format '{{.ID}}')

  # Loop over each network ID
  for network_id in $networks_ids; do
    echo "Inspecting network $network_id for connected containers..."
    local container_ids
    local container_id
    container_ids=$(docker network inspect "$network_id" --format '{{range .Containers}}{{.Name}} {{end}}')

    for container_id in $container_ids; do
      echo "Disconnecting container $container_id from network $network_id..."
      docker network disconnect -f "$network_id" "$container_id" || {
        echo "Failed to disconnect container $container_id from network $network_id"
      }
    done

    echo "Removing network $network_id..."
    docker network rm "$network_id" || {
      echo "Failed to remove network $network_id"
    }
  done
}

#######################################
# Removes the --dry-run flag from the Certbot command
# Globals:
#   PROJECT_ROOT_DIR
# Arguments:
#  None
#######################################
remove_dry_run_flag() {
  local docker_compose_file="${PROJECT_ROOT_DIR}/docker-compose.yml"
  local temp_file
  temp_file="$(mktemp)"

  echo "Checking for --dry-run flag in Certbot command..."

  # Remove --dry-run from the certbot command
  sed '/certbot:/,/command:/s/--dry-run//' "$docker_compose_file" > "$temp_file"

  # Check if the flag was removed
  if grep --quiet -- '--dry-run' "$temp_file"; then
    echo "--dry-run flag removal failed."
    rm "$temp_file"
    exit 1
  else
    # Backup docker-compose.yml & overwrite existing file
    cp -rf "$docker_compose_file" "${docker_compose_file}.bak"

    echo "--dry-run flag removed successfully."
    mv "$temp_file" "$docker_compose_file"
  fi
}

#######################################
# Builds and runs the backend service
# Globals:
#   PROJECT_ROOT_DIR
# Arguments:
#  None
#######################################
run_backend_service() {
  echo "Building and running Backend service..."
  docker compose build backend
  docker compose up -d backend
}

#######################################
# Builds and runs the frontend service
# Globals:
#   PROJECT_ROOT_DIR
# Arguments:
#  None
#######################################
run_frontend_service() {
  echo "Building and running Frontend service..."
  docker compose build frontend
  docker compose up -d frontend
}

#######################################
# Runs the Certbot service, checks for dry run success, and reruns services
# Globals:
#   PROJECT_ROOT_DIR
# Arguments:
#  None
#######################################
run_certbot_service() {
  echo "Running Certbot service..."
  docker compose build certbot

  # Capture the output of the Certbot service
  local certbot_output
  certbot_output=$(docker compose run --rm certbot)

  # Check for the success message in the output
  if [[ $certbot_output == *"The dry run was successful."* ]]; then
    echo "Certbot dry run successful."
    remove_dry_run_flag

    # Rebuild and rerun the Certbot service without the dry-run flag
    docker compose build certbot
    docker compose up -d certbot

    # Optionally, restart other services if needed
    echo "Restarting other services..."
    docker compose restart backend
    docker compose restart frontend
  else
    echo "Certbot dry run failed."
    exit 1
  fi
}

#######################################
# description
# Arguments:
#  None
#######################################
pre_flight() {
  # Remove containers that would conflict with `docker-compose up`
  remove_conflicting_containers || {
    echo "Failed to remove conflicting containers"
    exit 1
  }

  # Handle ambiguous networks
  handle_ambiguous_networks || {
    echo "Failed to handle ambiguous networks"
    exit 1
  }
}

# ---- Build and Run Docker ---- #
build_and_run_docker() {
  cd "$PROJECT_ROOT_DIR" || {
    echo "Failed to change directory to $PROJECT_ROOT_DIR"
    exit 1
  }

  handle_certs || {
    echo "Failed to handle certs"
    exit 1
  }

  # If Docker Compose is running, bring down the services
  if docker compose ps &> /dev/null; then
    echo "Bringing down existing Docker Compose services..."
    docker compose down || {
      echo "Failed to bring down existing Docker Compose services"
      exit 1
    }
  fi

  # Run each service separately
  run_backend_service
  run_frontend_service
  run_certbot_service

  # Dump logs or any other post-run operations
  dump_logs || {
    echo "Failed to dump logs"
    exit 1
  }
}
