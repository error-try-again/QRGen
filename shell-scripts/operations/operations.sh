#!/bin/bash

# --- User Actions --- #

# Dumps logs of all containers orchestrated by the Docker Compose file.
dump_logs() {
  test_docker_env
  produce_docker_logs > "$PROJECT_LOGS_DIR/service.log" && {
    echo "Docker logs dumped to $PROJECT_LOGS_DIR/service.log"
    cat "$PROJECT_LOGS_DIR/service.log"
  }
}

# Cleans current Docker Compose setup, arranges directories, and reinitiates Docker services.
reload() {
  echo "Reloading the project..."
  test_docker_env
  setup_project_directories
  stop_containers
  generate_server_files
  configure_nginx
  build_and_run_docker
}

# Shuts down any running Docker containers associated with the project and deletes the entire project directory.
cleanup() {
  test_docker_env
  echo "Cleaning up..."
  stop_containers

  declare -A directories=(
                                               ["Project"]=$PROJECT_ROOT_DIR
                                               ["Frontend"]=$FRONTEND_DIR
                                               ["Backend"]=$BACKEND_DIR
  )

  local dir_name
  local dir_path

  for dir_name in "${!directories[@]}"; do
    dir_path="${directories[$dir_name]}"
    if [[ -d $dir_path   ]]; then
      rm -rf "$dir_path" && cd ..
      echo "$dir_name directory $dir_path deleted."
    fi
  done

  echo "Cleanup complete."
}

#######################################
# description
# Arguments:
#  None
#######################################
update_project() {
  git stash
  git pull
}

#######################################
# description
# Arguments:
#  None
#######################################
purge_builds() {
  test_docker_env
  local containers
  containers=$(docker ps -a -q)
  echo "Stopping all containers..."
  if [ -n "$containers" ]; then
    docker stop $containers
  else
    echo "No containers to stop."
  fi
  echo "Purging Docker builds..."
  docker system prune -a
}

#######################################
# description
# Arguments:
#  None
#######################################
quit() {
  echo "Exiting..."
  exit 0
}

#######################################
# description
# Globals:
#   USE_LETS_ENCRYPT
# Arguments:
#  None
#######################################
handle_certs() {
  # Handle Let's Encrypt configuration
  if [[ $USE_LETS_ENCRYPT == "yes"   ]]; then

    # Generate self-signed certificates if they don't exist
    generate_self_signed_certificates

    # Start cert watcher here to ensure that changes to the self-signed certs are
    # picked up by ifnotify if they are regenerated by certbot after this
    initialize_cert_watcher || {
      echo "Failed to initialize cert watcher"
      exit 1
    }

  fi
}

# Function to remove containers that conflict with Docker Compose services
remove_conflicting_containers() {
  # Extract service names from docker-compose.yml
  local service_names
  service_names=$(docker-compose config --services)

  # Loop through each service name to check if corresponding container exists
  for service in $service_names; do
    # Generate the probable container name based on the folder name and service name
    # e.g. In this instance, since the project name is "QRGen" and the service
    # name is "backend", the probable container name would be "QRGen_backend_1"
    local probable_container_name="${PWD##*/}_${service}_1"

    # Check if a container with the generated name exists
    if docker ps -a --format '{{.Names}}' | grep -qw "$probable_container_name"; then
      echo "Removing existing container that may conflict: $probable_container_name"
      docker rm -f "$probable_container_name"
    else
      echo "No conflict for $probable_container_name"
    fi
  done
}

# ---- Build and Run Docker ---- #
build_and_run_docker() {
  if ! cd "$PROJECT_ROOT_DIR"; then
    echo "Failed to change directory to $PROJECT_ROOT_DIR"
    exit 1
  fi

  # If Docker Compose is running, bring down the services
    if docker compose ps -q | grep -q '.'; then
    echo "Docker Compose is running. Bringing down services..."
    if ! docker compose down; then
      echo "Failed to bring down Docker Compose services"
      exit 1
    fi
  else
    echo "Docker Compose is not running."
  fi

  if ! handle_certs; then
    echo "Failed to handle certificates"
    exit 1
  fi

  # Attempt to build Docker image using Docker Compose
  if ! docker compose build; then
    echo "Failed to build Docker image using Docker Compose"
    exit 1
  fi

  # Remove containers that would conflict with `docker-compose up`
  remove_conflicting_containers

  # Attempt to run Docker Compose
  if ! docker compose up -d; then
    echo "Failed to run Docker Compose"
    exit 1
  fi

  if ! docker compose ps; then
    echo "Failed to list Docker Compose services"
    exit 1
  fi

  dump_logs

  quit
}
