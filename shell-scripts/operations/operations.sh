#!/bin/bash

# --- User Actions --- #

# Dumps logs of all containers orchestrated by the Docker Compose file.
dump_logs() {
  test_docker_env
  produce_docker_logs > "$PROJECT_LOGS_DIR/service.log" && {
    echo "Docker logs dumped to $PROJECT_LOGS_DIR/service.log"
    cat "$PROJECT_LOGS_DIR/service.log"
  }
}

# Cleans current Docker Compose setup, arranges directories, and reinitiates Docker services.
reload() {
  echo "Reloading the project..."
  test_docker_env
  setup_project_directories
  stop_containers
  generate_server_files
  configure_nginx
  build_and_run_docker
}

# Shuts down any running Docker containers associated with the project and deletes the entire project directory.
cleanup() {
  test_docker_env
  echo "Cleaning up..."
  stop_containers

  declare -A directories=(
                                ["Project"]=$PROJECT_ROOT_DIR
                                ["Frontend"]=$FRONTEND_DIR
                                ["Backend"]=$BACKEND_DIR
  )

  local dir_name
  local dir_path

  for dir_name in "${!directories[@]}"; do
    dir_path="${directories[$dir_name]}"
    if [[ -d $dir_path   ]]; then
      rm -rf "$dir_path" && cd ..
      echo "$dir_name directory $dir_path deleted."
    fi
  done

  echo "Cleanup complete."
}

#######################################
# description
# Arguments:
#  None
#######################################
update_project() {
  git stash
  git pull
}

#######################################
# description
# Arguments:
#  None
#######################################
purge_builds() {
  test_docker_env
  local containers
  containers=$(docker ps -a -q)
  echo "Stopping all containers..."
  if [ -n "$containers" ]; then
    docker stop "$containers"
  else
    echo "No containers to stop."
  fi
  echo "Purging Docker builds..."
  docker system prune -a
}

#######################################
# description
# Arguments:
#  None
#######################################
quit() {
  echo "Exiting..."
  exit 0
}

#######################################
# description
# Globals:
#   USE_LETS_ENCRYPT
# Arguments:
#  None
#######################################
handle_certs() {
  # Handle Let's Encrypt configuration
  if [[ $USE_LETS_ENCRYPT == "yes"   ]]; then

    # Generate self-signed certificates if they don't exist
    generate_self_signed_certificates

    # Start cert watcher here to ensure that changes to the self-signed certs are
    # picked up by ifnotify if they are regenerated by certbot after this
    initialize_cert_watcher || {
      echo "Failed to initialize cert watcher"
      exit 1
    }

  fi
}

# Function to remove containers that conflict with Docker Compose services
remove_conflicting_containers() {
  # Extract service names from docker-compose.yml
  local service_names
  service_names=$(docker compose config --services)

  # Loop through each service name to check if corresponding container exists
  for service in $service_names; do
    # Generate the probable container name based on the folder name and service name
    # e.g. In this instance, since the project name is "QRGen" and the service
    # name is "backend", the probable container name would be "QRGen_backend_1"
    local probable_container_name="${PWD##*/}_${service}_1"

    # Check if a container with the generated name exists
    if docker ps -a --format '{{.Names}}' | grep -qw "$probable_container_name"; then
      echo "Removing existing container that may conflict: $probable_container_name"
      docker rm -f "$probable_container_name"
    else
      echo "No conflict for $probable_container_name"
    fi
  done
}

# Function to handle ambiguous Docker networks
handle_ambiguous_networks() {
  echo "Searching for ambiguous Docker networks..."
  local networks_ids
  local network_id

  # Get all custom networks (excluding default ones)
  networks_ids=$(docker network ls --filter name=qrgen --format '{{.ID}}')

  # Loop over each network ID
  for network_id in $networks_ids; do
    echo "Inspecting network $network_id for connected containers..."
    local container_ids
    local container_id
    container_ids=$(docker network inspect "$network_id" --format '{{range .Containers}}{{.Name}} {{end}}')

    for container_id in $container_ids; do
      echo "Disconnecting container $container_id from network $network_id..."
      docker network disconnect -f "$network_id" "$container_id" || {
        echo "Failed to disconnect container $container_id from network $network_id"
      }
    done

    echo "Removing network $network_id..."
    docker network rm "$network_id" || {
      echo "Failed to remove network $network_id"
    }
  done
}

# ---- Build and Run Docker ---- #
build_and_run_docker() {
  cd "$PROJECT_ROOT_DIR" || {
    echo "Failed to change directory to $PROJECT_ROOT_DIR"
    exit 1
  }

  handle_certs || {
    echo "Failed to handle certs"
    exit 1
  }

  # Remove containers that would conflict with `docker-compose up`
  remove_conflicting_containers || {
    echo "Failed to remove conflicting containers"
    exit 1
  }

  # Handle ambiguous networks
  handle_ambiguous_networks || {
    echo "Failed to handle ambiguous networks"
    exit 1
  }

  # If Docker Compose is running, bring down the services
  if docker compose ps &> /dev/null; then
    echo "Bringing down existing Docker Compose services..."
    docker compose down || {
      echo "Failed to bring down existing Docker Compose services"
      exit 1
    }
  fi

  # Attempt to build Docker image using Docker Compose
  docker compose build || {
    echo "Failed to build Docker image"
    exit 1
  }

  # Attempt to run Docker Compose
  docker compose up -d || {
    echo "Failed to run Docker Compose"
    exit 1
  }

  docker compose ps || {
    echo "Failed to list Docker Compose services"
    exit 1
  }

  dump_logs || {
    echo "Failed to dump logs"
    exit 1
  }
}
